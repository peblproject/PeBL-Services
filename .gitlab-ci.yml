variables:
   USERNAME: deployment   

image: node:12

cache:
    paths:
    - node_modules/

stages:
   - build
   - deploy

########################
### BUILDS
########################

buildDev:
  stage: build
  only:
    - dev

  script:
  - npm install
  - npm run compile
  - cp "$DEV_SERVER_CONFIG" dist/serverConfig.json
  - cp "$DEV_SERVER_CONFIG2" dist/serverConfig2.json
  - LAST_TAG=$(git describe --tags)
  - sed -i "s/REPLACEMEVERSION/$LAST_TAG/" dist/serverConfig.json
  - sed -i "s/REPLACEMEVERSION/$LAST_TAG/" dist/serverConfig2.json  
  artifacts:
    paths:
    - dist/
    - package.json

########################
    
buildQa:
  stage: build
  only:
    - qa

  script:
  - npm install
  - npm run compile
  - cp "$QA_SERVER_CONFIG" dist/serverConfig.json
  # - cp "$QA_SERVER_CONFIG2" dist/serverConfig2.json
  - LAST_TAG=$(git describe --tags | cut -d '-' -f1)
  - sed -i "s/REPLACEMEVERSION/$LAST_TAG/" dist/serverConfig.json
  # - sed -i "s/REPLACEMEVERSION/$LAST_TAG/" dist/serverConfig2.json    
  artifacts:
    paths:
    - dist/
    - package.json

########################
    
buildProd:
  stage: build
  only:
    - master

  script:
  - npm install
  - npm run compile
  - cp "$PROD_SERVER_CONFIG" dist/serverConfig.json
  # - cp "$PROD_SERVER_CONFIG2" dist/serverConfig2.json
  - LAST_TAG=$(git describe --tags)
  - sed -i "s/REPLACEMEVERSION/$LAST_TAG/" dist/serverConfig.json
  # - sed -i "s/REPLACEMEVERSION/$LAST_TAG/" dist/serverConfig2.json    
  artifacts:
    paths:
    - dist/
    - package.json

    
########################    
### DEPLOYMENTS
########################

deployDev:
  stage: deploy
  only:
    - dev
  script:
   - apt-get update -y
   - apt-get install openssh-client -y

   - eval $(ssh-agent -s)

   - mkdir -p ~/.ssh
   - chmod 700 ~/.ssh

   - echo "$DEV_SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
   - chmod 644 ~/.ssh/known_hosts

   - chmod 600 "$DEV_PRIVATE_KEY"
   - ssh-add "$DEV_PRIVATE_KEY" > /dev/null

   - ssh -p22 $USERNAME@$DEV_SERVER_IP "rm -rf /srv/devNode/*"
   - scp -P22 -r dist $USERNAME@$DEV_SERVER_IP:/srv/devNode/
   - scp -P22 -r package.json $USERNAME@$DEV_SERVER_IP:/srv/devNode/
   - ssh -p22 $USERNAME@$DEV_SERVER_IP "cd /srv/devNode && npm install --production"
   - ssh -p22 $USERNAME@$DEV_SERVER_IP "date > /srv/devNodeUpdated"

########################
   
deployQa:
  stage: deploy
  only:
    - qa
  script:
   - apt-get update -y
   - apt-get install openssh-client -y

   - eval $(ssh-agent -s)

   - mkdir -p ~/.ssh
   - chmod 700 ~/.ssh

   - echo "$QA_SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
   - chmod 644 ~/.ssh/known_hosts

   - chmod 600 "$QA_PRIVATE_KEY"
   - ssh-add "$QA_PRIVATE_KEY" > /dev/null

   - ssh -p22 $USERNAME@$QA_SERVER_IP "rm -rf /srv/qaNode/*"
   - scp -P22 -r dist $USERNAME@$QA_SERVER_IP:/srv/qaNode/
   - scp -P22 -r package.json $USERNAME@$QA_SERVER_IP:/srv/qaNode/
   - ssh -p22 $USERNAME@$QA_SERVER_IP "cd /srv/qaNode && npm install --production"
   - ssh -p22 $USERNAME@$QA_SERVER_IP "date > /srv/qaNodeUpdated"
   
########################
   
deployProd:
  stage: deploy
  only:
    - master
  script:
   - apt-get update -y
   - apt-get install openssh-client -y

   - eval $(ssh-agent -s)

   - mkdir -p ~/.ssh
   - chmod 700 ~/.ssh

   - echo "$PROD_SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
   - chmod 644 ~/.ssh/known_hosts

   - chmod 600 "$PROD_PRIVATE_KEY"
   - ssh-add "$PROD_PRIVATE_KEY" > /dev/null

   - ssh -p22 $USERNAME@$PROD_SERVER_IP "rm -rf /srv/prodNode/*"
   - scp -P22 -r dist $USERNAME@$PROD_SERVER_IP:/srv/qaNode/
   - scp -P22 -r package.json $USERNAME@$PROD_SERVER_IP:/srv/qaNode/
   - ssh -p22 $USERNAME@$PROD_SERVER_IP "cd /srv/prodNode && npm install --production"
   - ssh -p22 $USERNAME@$PROD_SERVER_IP "date > /srv/prodNodeUpdated"

